{"version":3,"file":"once.min.js","sources":["../src/once.js"],"sourcesContent":["/**\n * @file\n * Functionality to limit repeat JavaScript callbacks on a set of elements.\n */\n\n/**\n * @module once-dom\n *\n * @example <caption>Use as a module</caption>\n * <script type=\"module\">\n *   import once from \"https://unpkg.com/once-dom@2.0.1/src/once.js\";\n *   const elements = once(\"my-id\", document.querySelectorAll(\"div\"));\n *   // Initialize elements.\n *   elements.forEach(el => el.innerHTML = \"processed\");\n * </script>\n *\n * @example <caption>Use as a regular script</caption>\n * <script src=\"https://unpkg.com/once-dom@2.0.1/dist/once.min.js\"></script>\n * <script>\n *   const elements = once(\"my-id\", document.querySelectorAll(\"div\"));\n *   // Initialize elements.\n *   elements.forEach(el => el.innerHTML = \"processed\");\n * </script>\n *\n * @example <caption>Use jQuery integration</caption>\n * <script src=\"https://unpkg.com/jquery@3.5.1/dist/jquery.min.js\"></script>\n * <script src=\"https://unpkg.com/once-dom@2.0.1/dist/once.min.js\"></script>\n * <script src=\"https://unpkg.com/once-dom@2.0.1/dist/once.jquery.min.js\"></script>\n * <script>\n *   jQuery(\"div\")\n *     .once(\"my-id\")\n *     .each(function () {\n *       this.innerHTML = \"processed\";\n *     });\n * </script>\n */\n\n/**\n * Illegal spaces in ids.\n *\n * @private\n *\n * @type {RegExp}\n */\nconst wsRE = /[\\11\\12\\14\\15\\40]+/;\n\n/**\n * Name of the HTML attribute containing an element's once ids.\n *\n * @private\n *\n * @type {string}\n */\nconst attrName = 'data-once';\n\n/**\n * Verify the validity of the once id.\n *\n * @private\n *\n * @param {string} id\n *   The id passed by a call to a once() function.\n *\n * @return {string}\n *   A valid id, used for indicating an element has been processed.\n *\n * @throws {TypeError|RangeError}\n */\nfunction checkId(id) {\n  if (typeof id !== 'string') {\n    throw new TypeError('The once id parameter must be a string');\n  }\n  if (id === '' || wsRE.test(id)) {\n    throw new RangeError(\n      'The once id parameter must not be empty or contain spaces',\n    );\n  }\n  return id;\n}\n\n/**\n * Verifies that an item is an instance of Element.\n *\n * This function is used during filtering to ensure only DOM elements are\n * processed. once() makes use of get/setAttribute, which are methods\n * inherited from the Element object, so only of Element can be used.\n *\n * @private\n *\n * @param {*} itemToCheck\n *   The item to check.\n *\n * @return {bool}\n *   True if the item is an instance of Element\n *\n * @throws {TypeError}\n */\nfunction checkElement(itemToCheck) {\n  if (!(itemToCheck instanceof Element)) {\n    throw new TypeError('The element must be an instance of Element');\n  }\n  return true;\n}\n\n/**\n * A helper for applying DOM changes to a filtered set of elements.\n *\n * This makes it possible to filter items that are not instances of Element,\n * then modify their DOM attributes in a single array traversal.\n *\n * @private\n *\n * @param {NodeList|Array.<Element>} elements\n *   A NodeList or array of elements passed by a call to a once() function.\n * @param {string} selector\n *   A CSS selector to check against to each element in the array.\n * @param {function} [apply]\n *   An optional function to apply on all matched elements.\n *\n * @return {Array.<Element>}\n *   The array of elements that match the CSS selector.\n */\nfunction filterAndModify(elements, selector, apply) {\n  return Array.prototype.filter.call(elements, element => {\n    const selected = checkElement(element) && element.matches(selector);\n    if (selected && apply) {\n      apply(element);\n    }\n    return selected;\n  });\n}\n\n/**\n * Add or remove an item from a list of once values.\n *\n * This function removes duplicates while adding or removing a once id in a\n * single array traversal.\n *\n * @private\n *\n * @param {string} value\n *   A space separated string of once ids from a data-drupal-once attribute.\n * @param {string} add\n *   The once id to add to the list of values.\n * @param {string} remove\n *   The once id to remove from the list of values.\n *\n * @return {string}\n *   A space separated string of once ids, to be assigned to a\n *   data-drupal-once attribute value.\n */\nfunction updateAttribute({ value, add, remove }) {\n  const result = [];\n  value\n    .trim()\n    .split(wsRE)\n    .forEach(item => {\n      if (result.indexOf(item) < 0 && item !== remove) {\n        result.push(item);\n      }\n    });\n  if (add) {\n    result.push(add);\n  }\n  return result.join(' ');\n}\n\n/**\n * Ensures a JavaScript callback is only executed once on a set of elements.\n *\n * Filters a NodeList or array of elements, removing those already processed\n * by a callback with a given id.\n * This method adds the data-drupal-once attribute on DOM elements. The value of\n * this attribute identifies if a given callback has been executed on that\n * element.\n *\n * @global\n *\n * @example\n * const elements = once(\n *   'my-once-id',\n *   document.querySelectorAll('[data-myelement]'),\n * );\n *\n * @param  {string} id\n *   The id of the once call.\n * @param  {NodeList|Array.<Element>} elements\n *   A NodeList or array of elements.\n *\n * @return {Array.<Element>}\n *   An array of elements that have not yet been processed by a once call\n *   with a given id.\n */\nfunction once(id, elements) {\n  const dataId = checkId(id);\n  return filterAndModify(\n    elements,\n    `:not([${attrName}~=\"${dataId}\"])`,\n    element => {\n      let value = dataId;\n      if (element.hasAttribute(attrName)) {\n        value = updateAttribute({\n          value: element.getAttribute(attrName),\n          add: dataId,\n        });\n      }\n      element.setAttribute(attrName, value);\n    },\n  );\n}\n\n/**\n * Removes a once id from an element's data-drupal-once attribute value.\n *\n * If a once id is removed from an element's data-drupal-once attribute value,\n * the JavaScript callback associated with that id can be executed on that\n * element again.\n *\n * @method once.remove\n *\n * @example\n * const removedOnceElements = once.remove(\n *   'my-once-id',\n *   document.querySelectorAll('[data-myelement]'),\n * );\n *\n * @param  {string} id\n *   The id of a once call.\n * @param  {NodeList|Array.<Element>} elements\n *   A NodeList or array of elements to remove the once id from.\n *\n * @return {Array.<Element>}\n *   A filtered array of elements that had been processed by the provided id,\n *   and are now able to be processed again.\n */\nonce.remove = (id, elements) => {\n  const dataId = checkId(id);\n  return filterAndModify(elements, `[${attrName}~=\"${dataId}\"]`, element => {\n    const value = updateAttribute({\n      value: element.getAttribute(attrName),\n      remove: dataId,\n    });\n    if (value === '') {\n      element.removeAttribute(attrName);\n    } else {\n      element.setAttribute(attrName, value);\n    }\n  });\n};\n\n/**\n * Finds elements that have been processed by a given once id.\n *\n * Filters a NodeList or array, returning an array of the elements already\n * processed by the provided once id.\n *\n * @method once.filter\n *\n * @example\n * const filteredElements = once.filter(\n *   'my-once-id',\n *   document.querySelectorAll('[data-myelement]'),\n * );\n *\n * @param  {string} id\n *   The id of the once call.\n * @param  {NodeList|Array.<Element>} elements\n *   A NodeList or array of elements to be searched.\n *\n * @return {Array.<Element>}\n *   A filtered array of elements that have already been processed by the\n *   provided once id.\n */\nonce.filter = (id, elements) => {\n  const dataId = checkId(id);\n  return filterAndModify(elements, `[${attrName}~=\"${dataId}\"]`);\n};\n\n/**\n * Finds elements that have been processed by a given once id.\n *\n * Query the 'context' element for elements that already have the\n * corresponding once id value.\n *\n * @method once.find\n *\n * @example\n * const oncedElements = once.find('my-once-id');\n *\n * @param  {string} id\n *   The id of the once call.\n * @param  {Element} [context=document.documentElement]\n *   Scope of the search for matching elements.\n *\n * @return {Array.<Element>}\n *   A filtered array of elements that have already been processed by the\n *   provided once id.\n */\nonce.find = (id, context = document.documentElement) => {\n  const dataId = checkId(id);\n  return (\n    checkElement(context) &&\n    // Ensure the return is an Array and not a NodeList.\n    Array.prototype.slice.call(\n      context.querySelectorAll(`[${attrName}~=\"${dataId}\"]`),\n    )\n  );\n};\n\nexport default once;\n"],"names":["const","wsRE","attrName","checkId","id","TypeError","test","RangeError","checkElement","itemToCheck","Element","filterAndModify","elements","selector","apply","Array","prototype","filter","call","element","selected","matches","updateAttribute","result","value","trim","split","forEach","item","indexOf","remove","push","add","join","once","dataId","let","hasAttribute","getAttribute","setAttribute","removeAttribute","find","context","document","documentElement","slice","querySelectorAll"],"mappings":"4BA4CAA,IAAMC,EAAO,qBASPC,EAAW,YAejB,SAASC,EAAQC,GACf,GAAkB,iBAAPA,EACT,MAAM,IAAIC,UAAU,0CAEtB,GAAW,KAAPD,GAAaH,EAAKK,KAAKF,GACzB,MAAM,IAAIG,WACR,6DAGJ,OAAOH,EAoBT,SAASI,EAAaC,GACpB,KAAMA,aAAuBC,SAC3B,MAAM,IAAIL,UAAU,8CAEtB,OAAO,EAqBT,SAASM,EAAgBC,EAAUC,EAAUC,GAC3C,OAAOC,MAAMC,UAAUC,OAAOC,KAAKN,YAAUO,GAC3CnB,IAAMoB,EAAWZ,EAAaW,IAAYA,EAAQE,QAAQR,GAI1D,OAHIO,GAAYN,GACdA,EAAMK,GAEDC,KAuBX,SAASE,sCACDC,EAAS,GAYf,OAXAC,EACGC,OACAC,MAAMzB,GACN0B,kBAAQC,GACHL,EAAOM,QAAQD,GAAQ,GAAKA,IAASE,GACvCP,EAAOQ,KAAKH,MAGdI,GACFT,EAAOQ,KAAKC,GAEPT,EAAOU,KAAK,KA6BrB,SAASC,EAAK9B,EAAIQ,GAChBZ,IAAMmC,EAAShC,EAAQC,GACvB,OAAOO,EACLC,uBACuBuB,kBACvBhB,GACEiB,IAAIZ,EAAQW,EACRhB,EAAQkB,aAAanC,KACvBsB,EAAQF,EAAgB,CACtBE,MAAOL,EAAQmB,aAAapC,GAC5B8B,IAAKG,KAGThB,EAAQoB,aAAarC,EAAUsB,aA6BrCU,EAAKJ,gBAAU1B,EAAIQ,GACjBZ,IAAMmC,EAAShC,EAAQC,GACvB,OAAOO,EAAgBC,kBAA4BuB,iBAAYhB,GAC7DnB,IAAMwB,EAAQF,EAAgB,CAC5BE,MAAOL,EAAQmB,aAAapC,GAC5B4B,OAAQK,IAEI,KAAVX,EACFL,EAAQqB,gBAAgBtC,GAExBiB,EAAQoB,aAAarC,EAAUsB,OA4BrCU,EAAKjB,gBAAUb,EAAIQ,GAEjB,OAAOD,EAAgBC,kBADRT,EAAQC,UAwBzB8B,EAAKO,cAAQrC,EAAIsC,kBAAUC,SAASC,iBAClC5C,IAAMmC,EAAShC,EAAQC,GACvB,OACEI,EAAakC,IAEb3B,MAAMC,UAAU6B,MAAM3B,KACpBwB,EAAQI,iCAAmCX"}