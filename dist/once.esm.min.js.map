{"version":3,"file":"once.esm.min.js","sources":["../src/once.js"],"sourcesContent":["/**\n * Mark DOM elements as processed to prevent multiple initializations.\n *\n * @module once-dom\n *\n * @example <caption>Use as a module</caption>\n * <script type=\"module\">\n *   import once from 'https://unpkg.com/once-dom@latest/dist/once.esm.js';\n *   const elements = once('my-once-id', 'div');\n *   // Initialize elements.\n *   elements.forEach(el => el.innerHTML = 'processed');\n * </script>\n *\n * @example <caption>Use as a regular script</caption>\n * <script src=\"https://unpkg.com/once-dom@latest/dist/once.min.js\"></script>\n * <script>\n *   const elements = once('my-once-id', 'div');\n *   // Initialize elements.\n *   elements.forEach(el => el.innerHTML = 'processed');\n * </script>\n * @example <caption>Using a single element as input</caption>\n * // once methods always return an array, to simplify the use with a single\n * // element use destructuring or the shift method.\n * const [myElement] = once('my-once-id', document.body);\n * const myElement = once('my-once-id', document.body).shift();\n */\n\n/**\n * Illegal spaces in ids.\n *\n * @private\n *\n * @type {RegExp}\n */\nconst wsRE = /[\\11\\12\\14\\15\\40]+/;\n\n/**\n * Name of the HTML attribute containing an element's once ids.\n *\n * @private\n *\n * @type {string}\n */\nconst attrName = 'data-once';\n\n/**\n * Shortcut to access the html element.\n *\n * @private\n *\n * @type {HTMLElement}\n */\nconst doc = document;\n\n/**\n * Helper to access element attributes.\n *\n * @private\n *\n * @param {Element} element\n *   The Element to access the data-once attribute from.\n * @param {string} op\n *   The action to take on the element.\n * @param {string} [value]\n *   Optional value for setAttribute.\n *\n * @return {string|undefined|null|boolean}\n *   Result of the attribute method.\n */\nfunction attr(element, op, value) {\n  const method = `${op}Attribute`;\n  return method in element && element[method](attrName, value);\n}\n\n/**\n * Verify the validity of the once id.\n *\n * @private\n *\n * @param {string} id\n *   The id passed by a call to a once() function.\n *\n * @return {string}\n *   A valid id, used for indicating an element has been processed.\n *\n * @throws {TypeError|RangeError}\n */\nfunction checkId(id) {\n  if (typeof id !== 'string') {\n    throw new TypeError('once ID must be a string');\n  }\n  if (id === '' || wsRE.test(id)) {\n    throw new RangeError('once ID must not be empty or contain spaces');\n  }\n  return id;\n}\n\n/**\n * Return the attribute selector.\n *\n * @private\n *\n * @param {string} id\n *   The once id to select.\n *\n * @return {string}\n *   The full CSS attribute selector.\n */\nfunction attrSelector(id) {\n  return checkId(id) && `[${attrName}~=\"${id}\"]`;\n}\n\n/**\n * Verifies that an item is an instance of Element.\n *\n * This function is used during filtering to ensure only DOM elements are\n * processed. once() makes use of get/setAttribute, which are methods\n * inherited from the Element object, so only of Element can be used.\n *\n * @private\n *\n * @param {*} itemToCheck\n *   The item to check.\n *\n * @return {boolean}\n *   True if the item is an instance of Element\n *\n * @throws {TypeError}\n */\nfunction checkElement(itemToCheck) {\n  if (!(itemToCheck instanceof Element)) {\n    throw new TypeError('The element must be an instance of Element');\n  }\n  return true;\n}\n\n/**\n * Process arguments, query the DOM if necessary.\n *\n * @private\n *\n * @param {NodeList|Array.<Element>|Element|string} selector\n *   A NodeList or array of elements.\n * @param {Document|Element} [context=document]\n *   An element to use as context for querySelectorAll.\n *\n * @return {Array.<Element>}\n *   An array with the processed Id and the list of elements to process.\n */\nfunction getElements(selector, context = doc) {\n  // Assume selector is an array-like value.\n  let elements = selector;\n\n  // This is a selector, query the elements.\n  if (\n    typeof selector === 'string' &&\n    (context === doc || checkElement(context))\n  ) {\n    elements = context.querySelectorAll(selector);\n  }\n  // This is a single element.\n  else if (selector instanceof Element) {\n    elements = [selector];\n  }\n\n  return elements;\n}\n\n/**\n * A helper for applying DOM changes to a filtered set of elements.\n *\n * This makes it possible to filter items that are not instances of Element,\n * then modify their DOM attributes in a single array traversal.\n *\n * @private\n *\n * @param {NodeList|Array.<Element>} elements\n *   A NodeList or array of elements passed by a call to a once() function.\n * @param {string} selector\n *   A CSS selector to check against to each element in the array.\n * @param {function} [apply]\n *   An optional function to apply on all matched elements.\n *\n * @return {Array.<Element>}\n *   The array of elements that match the CSS selector.\n */\nfunction filterAndModify(elements, selector, apply) {\n  return Array.prototype.filter.call(elements, element => {\n    const selected = checkElement(element) && element.matches(selector);\n    if (selected && apply) {\n      apply(element);\n    }\n    return selected;\n  });\n}\n\n/**\n * Add or remove an item from a list of once values.\n *\n * This function removes duplicates while adding or removing a once id in a\n * single array traversal.\n *\n * @private\n *\n * @param {string} value\n *   A space separated string of once ids from a data-drupal-once attribute.\n * @param {string} add\n *   The once id to add to the list of values.\n * @param {string} remove\n *   The once id to remove from the list of values.\n *\n * @return {string}\n *   A space separated string of once ids, to be assigned to a\n *   data-drupal-once attribute value.\n */\nfunction updateAttribute({ value, add, remove }) {\n  const result = [];\n  value\n    .trim()\n    .split(wsRE)\n    .forEach(item => {\n      if (result.indexOf(item) < 0 && item !== remove) {\n        result.push(item);\n      }\n    });\n  if (add) {\n    result.push(add);\n  }\n  return result.join(' ');\n}\n\n/**\n * Ensures a JavaScript callback is only executed once on a set of elements.\n *\n * Filters a NodeList or array of elements, removing those already processed\n * by a callback with a given id.\n * This method adds a `data-once` attribute on DOM elements. The value of\n * this attribute identifies if a given callback has been executed on that\n * element.\n *\n * @global\n *\n * @example <caption>Basic usage</caption>\n * const elements = once('my-once-id', '[data-myelement]');\n * @example <caption>Input parameters accepted</caption>\n * // NodeList.\n * once('my-once-id', document.querySelectorAll('[data-myelement]'));\n * // Array or Array-like of Element.\n * once('my-once-id', jQuery('[data-myelement]'));\n * // A CSS selector without a context.\n * once('my-once-id', '[data-myelement]');\n * // A CSS selector with a context.\n * once('my-once-id', '[data-myelement]', document.head);\n * // Single Element.\n * once('my-once-id', document.querySelector('#some-id'));\n * @example <caption>Using a single element</caption>\n * // Once always returns an array, event when passing a single element. Some\n * // forms that can be used to keep code readable.\n * // Destructuring:\n * const [myElement] = once('my-once-id', document.body);\n * // By changing the resulting array, es5 compatible.\n * const myElement = once('my-once-id', document.body).shift();\n *\n * @param {string} id\n *   The id of the once call.\n * @param {NodeList|Array.<Element>|Element|string} selector\n *   A NodeList or array of elements.\n * @param {Document|Element} [context=document]\n *   An element to use as context for querySelectorAll.\n *\n * @return {Array.<Element>}\n *   An array of elements that have not yet been processed by a once call\n *   with a given id.\n */\nfunction once(id, selector, context) {\n  return filterAndModify(\n    getElements(selector, context),\n    `:not(${attrSelector(id)})`,\n    element => {\n      let value = id;\n      if (attr(element, 'has')) {\n        value = updateAttribute({\n          value: attr(element, 'get'),\n          add: id,\n        });\n      }\n      attr(element, 'set', value);\n    },\n  );\n}\n\n/**\n * Removes a once id from an element's data-drupal-once attribute value.\n *\n * If a once id is removed from an element's data-drupal-once attribute value,\n * the JavaScript callback associated with that id can be executed on that\n * element again.\n *\n * @method once.remove\n *\n * @example <caption>Basic usage</caption>\n * const elements = once.remove('my-once-id', '[data-myelement]');\n * @example <caption>Input parameters accepted</caption>\n * // NodeList.\n * once.remove('my-once-id', document.querySelectorAll('[data-myelement]'));\n * // Array or Array-like of Element.\n * once.remove('my-once-id', jQuery('[data-myelement]'));\n * // A CSS selector without a context.\n * once.remove('my-once-id', '[data-myelement]');\n * // A CSS selector with a context.\n * once.remove('my-once-id', '[data-myelement]', document.head);\n * // Single Element.\n * once.remove('my-once-id', document.querySelector('#some-id'));\n *\n * @param {string} id\n *   The id of a once call.\n * @param {NodeList|Array.<Element>|Element|string} selector\n *   A NodeList or array of elements to remove the once id from.\n * @param {Document|Element} [context=document]\n *   An element to use as context for querySelectorAll.\n *\n * @return {Array.<Element>}\n *   A filtered array of elements that had been processed by the provided id,\n *   and are now able to be processed again.\n */\nonce.remove = (id, selector, context) => {\n  return filterAndModify(\n    getElements(selector, context),\n    attrSelector(id),\n    element => {\n      const value = updateAttribute({\n        value: attr(element, 'get'),\n        remove: id,\n      });\n      if (value === '') {\n        attr(element, 'remove');\n      } else {\n        attr(element, 'set', value);\n      }\n    },\n  );\n};\n\n/**\n * Finds elements that have been processed by a given once id.\n *\n * Filters a NodeList or array, returning an array of the elements already\n * processed by the provided once id. If a selector is needed use the {@link\n * once.find} method.\n *\n * @method once.filter\n *\n * @example <caption>Basic usage</caption>\n * const filteredElements = once.filter('my-once-id', '[data-myelement]');\n * @example <caption>Input parameters accepted</caption>\n * // NodeList.\n * once.filter('my-once-id', document.querySelectorAll('[data-myelement]'));\n * // Array or Array-like of Element.\n * once.filter('my-once-id', jQuery('[data-myelement]'));\n *\n * @param {string} id\n *   The id of the once call.\n * @param {NodeList|Array.<Element>} elements\n *   A NodeList or array of elements to be searched.\n *\n * @return {Array.<Element>}\n *   A filtered array of elements that have already been processed by the\n *   provided once id.\n */\nonce.filter = (id, elements) => filterAndModify(elements, attrSelector(id));\n\n/**\n * Finds elements that have been processed by a given once id.\n *\n * Query the 'context' element for elements that already have the\n * corresponding once id value.\n *\n * @method once.find\n *\n * @example <caption>Basic usage</caption>\n * const oncedElements = once.find('my-once-id');\n * @example <caption>Input parameters accepted</caption>\n * // Call without a context.\n * once.find('my-once-id');\n * // Call with a context.\n * once.find('my-once-id', document.head);\n *\n * @param {string} id\n *   The id of the once call.\n * @param {Document|Element} [context=document]\n *   Scope of the search for matching elements.\n *\n * @return {Array.<Element>}\n *   A filtered array of elements that have already been processed by the\n *   provided once id.\n */\nonce.find = (id, context) => getElements(attrSelector(id), context);\n\nexport default once;\n"],"names":["const","wsRE","doc","document","attr","element","op","value","method","attrSelector","id","TypeError","test","RangeError","checkId","checkElement","itemToCheck","Element","getElements","selector","context","let","elements","querySelectorAll","filterAndModify","apply","Array","prototype","filter","call","selected","matches","updateAttribute","result","trim","split","forEach","item","indexOf","remove","push","add","join","once","find"],"mappings":";AAkCAA,IAAMC,EAAO,qBAkBPC,EAAMC,SAiBZ,SAASC,EAAKC,EAASC,EAAIC,GACzBP,IAAMQ,EAAYF,cAClB,OAAOE,KAAUH,GAAWA,EAAQG,GA5BrB,YA4BuCD,GAqCxD,SAASE,EAAaC,GACpB,OAtBF,SAAiBA,GACf,GAAkB,iBAAPA,EACT,MAAM,IAAIC,UAAU,4BAEtB,GAAW,KAAPD,GAAaT,EAAKW,KAAKF,GACzB,MAAM,IAAIG,WAAW,+CAEvB,OAAOH,EAeAI,CAAQJ,oBAAyBA,OAoB1C,SAASK,EAAaC,GACpB,KAAMA,aAAuBC,SAC3B,MAAM,IAAIN,UAAU,8CAEtB,OAAO,EAgBT,SAASO,EAAYC,EAAUC,kBAAUlB,GAEvCmB,IAAIC,EAAWH,EAcf,MAVsB,iBAAbA,GACNC,IAAYlB,IAAOa,EAAaK,GAK1BD,aAAoBF,UAC3BK,EAAW,CAACH,IAJZG,EAAWF,EAAQG,iBAAiBJ,GAO/BG,EAqBT,SAASE,EAAgBF,EAAUH,EAAUM,GAC3C,OAAOC,MAAMC,UAAUC,OAAOC,KAAKP,YAAUjB,GAC3CL,IAAM8B,EAAWf,EAAaV,IAAYA,EAAQ0B,QAAQZ,GAI1D,OAHIW,GAAYL,GACdA,EAAMpB,GAEDyB,KAuBX,SAASE,sCACDC,EAAS,GAYf,OAXA1B,EACG2B,OACAC,MAAMlC,GACNmC,kBAAQC,GACHJ,EAAOK,QAAQD,GAAQ,GAAKA,IAASE,GACvCN,EAAOO,KAAKH,MAGdI,GACFR,EAAOO,KAAKC,GAEPR,EAAOS,KAAK,KA8CrB,SAASC,EAAKjC,EAAIS,EAAUC,GAC1B,OAAOI,EACLN,EAAYC,EAAUC,WACdX,EAAaC,iBACrBL,GACEgB,IAAId,EAAQG,EACRN,EAAKC,EAAS,SAChBE,EAAQyB,EAAgB,CACtBzB,MAAOH,EAAKC,EAAS,OACrBoC,IAAK/B,KAGTN,EAAKC,EAAS,MAAOE,MAuC3BoC,EAAKJ,gBAAU7B,EAAIS,EAAUC,GAC3B,OAAOI,EACLN,EAAYC,EAAUC,GACtBX,EAAaC,aACbL,GACEL,IAAMO,EAAQyB,EAAgB,CAC5BzB,MAAOH,EAAKC,EAAS,OACrBkC,OAAQ7B,IAEI,KAAVH,EACFH,EAAKC,EAAS,UAEdD,EAAKC,EAAS,MAAOE,OAgC7BoC,EAAKf,gBAAUlB,EAAIY,UAAaE,EAAgBF,EAAUb,EAAaC,KA2BvEiC,EAAKC,cAAQlC,EAAIU,UAAYF,EAAYT,EAAaC,GAAKU"}